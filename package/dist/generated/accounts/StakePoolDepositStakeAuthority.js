"use strict";
/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.stakePoolDepositStakeAuthorityBeet = exports.StakePoolDepositStakeAuthority = void 0;
const web3 = __importStar(require("@solana/web3.js"));
const beet = __importStar(require("@metaplex-foundation/beet"));
const beetSolana = __importStar(require("@metaplex-foundation/beet-solana"));
/**
 * Holds the data for the {@link StakePoolDepositStakeAuthority} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
class StakePoolDepositStakeAuthority {
    constructor(base, stakePool, poolMint, authority, vault, stakePoolProgramId, coolDownSeconds, initalFeeBps, feeWallet, bumpSeed, reserved /* size: 256 */) {
        this.base = base;
        this.stakePool = stakePool;
        this.poolMint = poolMint;
        this.authority = authority;
        this.vault = vault;
        this.stakePoolProgramId = stakePoolProgramId;
        this.coolDownSeconds = coolDownSeconds;
        this.initalFeeBps = initalFeeBps;
        this.feeWallet = feeWallet;
        this.bumpSeed = bumpSeed;
        this.reserved = reserved;
    }
    /**
     * Creates a {@link StakePoolDepositStakeAuthority} instance from the provided args.
     */
    static fromArgs(args) {
        return new StakePoolDepositStakeAuthority(args.base, args.stakePool, args.poolMint, args.authority, args.vault, args.stakePoolProgramId, args.coolDownSeconds, args.initalFeeBps, args.feeWallet, args.bumpSeed, args.reserved);
    }
    /**
     * Deserializes the {@link StakePoolDepositStakeAuthority} from the data of the provided {@link web3.AccountInfo}.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static fromAccountInfo(accountInfo, offset = 0) {
        return StakePoolDepositStakeAuthority.deserialize(accountInfo.data, offset);
    }
    /**
     * Retrieves the account info from the provided address and deserializes
     * the {@link StakePoolDepositStakeAuthority} from its data.
     *
     * @throws Error if no account info is found at the address or if deserialization fails
     */
    static async fromAccountAddress(connection, address, commitmentOrConfig) {
        const accountInfo = await connection.getAccountInfo(address, commitmentOrConfig);
        if (accountInfo == null) {
            throw new Error(`Unable to find StakePoolDepositStakeAuthority account at ${address}`);
        }
        return StakePoolDepositStakeAuthority.fromAccountInfo(accountInfo, 0)[0];
    }
    /**
     * Provides a {@link web3.Connection.getProgramAccounts} config builder,
     * to fetch accounts matching filters that can be specified via that builder.
     *
     * @param programId - the program that owns the accounts we are filtering
     */
    static gpaBuilder(programId = new web3.PublicKey('5TAiuAh3YGDbwjEruC1ZpXTJWdNDS7Ur7VeqNNiHMmGV')) {
        return beetSolana.GpaBuilder.fromStruct(programId, exports.stakePoolDepositStakeAuthorityBeet);
    }
    /**
     * Deserializes the {@link StakePoolDepositStakeAuthority} from the provided data Buffer.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static deserialize(buf, offset = 0) {
        return exports.stakePoolDepositStakeAuthorityBeet.deserialize(buf, offset);
    }
    /**
     * Serializes the {@link StakePoolDepositStakeAuthority} into a Buffer.
     * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
     */
    serialize() {
        return exports.stakePoolDepositStakeAuthorityBeet.serialize(this);
    }
    /**
     * Returns the byteSize of a {@link Buffer} holding the serialized data of
     * {@link StakePoolDepositStakeAuthority}
     */
    static get byteSize() {
        return exports.stakePoolDepositStakeAuthorityBeet.byteSize;
    }
    /**
     * Fetches the minimum balance needed to exempt an account holding
     * {@link StakePoolDepositStakeAuthority} data from rent
     *
     * @param connection used to retrieve the rent exemption information
     */
    static async getMinimumBalanceForRentExemption(connection, commitment) {
        return connection.getMinimumBalanceForRentExemption(StakePoolDepositStakeAuthority.byteSize, commitment);
    }
    /**
     * Determines if the provided {@link Buffer} has the correct byte size to
     * hold {@link StakePoolDepositStakeAuthority} data.
     */
    static hasCorrectByteSize(buf, offset = 0) {
        return buf.byteLength - offset === StakePoolDepositStakeAuthority.byteSize;
    }
    /**
     * Returns a readable version of {@link StakePoolDepositStakeAuthority} properties
     * and can be used to convert to JSON and/or logging
     */
    pretty() {
        return {
            base: this.base.toBase58(),
            stakePool: this.stakePool.toBase58(),
            poolMint: this.poolMint.toBase58(),
            authority: this.authority.toBase58(),
            vault: this.vault.toBase58(),
            stakePoolProgramId: this.stakePoolProgramId.toBase58(),
            coolDownSeconds: this.coolDownSeconds,
            initalFeeBps: this.initalFeeBps,
            feeWallet: this.feeWallet.toBase58(),
            bumpSeed: this.bumpSeed,
            reserved: this.reserved,
        };
    }
}
exports.StakePoolDepositStakeAuthority = StakePoolDepositStakeAuthority;
/**
 * @category Accounts
 * @category generated
 */
exports.stakePoolDepositStakeAuthorityBeet = new beet.BeetStruct([
    ['base', beetSolana.publicKey],
    ['stakePool', beetSolana.publicKey],
    ['poolMint', beetSolana.publicKey],
    ['authority', beetSolana.publicKey],
    ['vault', beetSolana.publicKey],
    ['stakePoolProgramId', beetSolana.publicKey],
    ['coolDownSeconds', beet.u64],
    ['initalFeeBps', beet.u32],
    ['feeWallet', beetSolana.publicKey],
    ['bumpSeed', beet.u8],
    ['reserved', beet.uniformFixedSizeArray(beet.u8, 256)],
], StakePoolDepositStakeAuthority.fromArgs, 'StakePoolDepositStakeAuthority');

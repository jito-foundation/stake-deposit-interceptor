/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  DepositStakeArgs,
  depositStakeArgsBeet,
} from '../types/DepositStakeArgs'

/**
 * @category Instructions
 * @category DepositStake
 * @category generated
 */
export type DepositStakeInstructionArgs = {
  depositStakeArgs: DepositStakeArgs
}
/**
 * @category Instructions
 * @category DepositStake
 * @category generated
 */
export const DepositStakeStruct = new beet.BeetArgsStruct<
  DepositStakeInstructionArgs & {
    instructionDiscriminator: number
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['depositStakeArgs', depositStakeArgsBeet],
  ],
  'DepositStakeInstructionArgs'
)
/**
 * Accounts required by the _DepositStake_ instruction
 *
 * @property [_writable_, **signer**] payer
 * @property [] stakePoolProgram
 * @property [_writable_] depositReceipt
 * @property [_writable_] stakePool
 * @property [_writable_] validatorStakeList
 * @property [] depositStakeAuthority
 * @property [**signer**] base
 * @property [] stakePoolWithdrawAuthority
 * @property [_writable_] stake
 * @property [_writable_] validatorStakeAccount
 * @property [_writable_] reserveStakeAccount
 * @property [_writable_] vault
 * @property [_writable_] managerFeeAccount
 * @property [_writable_] referrerPoolTokensAccount
 * @property [_writable_] poolMint
 * @property [] clock
 * @property [] stakeHistory
 * @property [] stakeProgram
 * @category Instructions
 * @category DepositStake
 * @category generated
 */
export type DepositStakeInstructionAccounts = {
  payer: web3.PublicKey
  stakePoolProgram: web3.PublicKey
  depositReceipt: web3.PublicKey
  stakePool: web3.PublicKey
  validatorStakeList: web3.PublicKey
  depositStakeAuthority: web3.PublicKey
  base: web3.PublicKey
  stakePoolWithdrawAuthority: web3.PublicKey
  stake: web3.PublicKey
  validatorStakeAccount: web3.PublicKey
  reserveStakeAccount: web3.PublicKey
  vault: web3.PublicKey
  managerFeeAccount: web3.PublicKey
  referrerPoolTokensAccount: web3.PublicKey
  poolMint: web3.PublicKey
  clock: web3.PublicKey
  stakeHistory: web3.PublicKey
  tokenProgram?: web3.PublicKey
  stakeProgram: web3.PublicKey
  systemProgram?: web3.PublicKey
}

export const depositStakeInstructionDiscriminator = 2

/**
 * Creates a _DepositStake_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category DepositStake
 * @category generated
 */
export function createDepositStakeInstruction(
  accounts: DepositStakeInstructionAccounts,
  args: DepositStakeInstructionArgs,
  programId = new web3.PublicKey('5TAiuAh3YGDbwjEruC1ZpXTJWdNDS7Ur7VeqNNiHMmGV')
) {
  const [data] = DepositStakeStruct.serialize({
    instructionDiscriminator: depositStakeInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.stakePoolProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.depositReceipt,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.stakePool,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.validatorStakeList,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.depositStakeAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.base,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.stakePoolWithdrawAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.stake,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.validatorStakeAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.reserveStakeAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.vault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.managerFeeAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.referrerPoolTokensAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.poolMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.clock,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.stakeHistory,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.stakeProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}

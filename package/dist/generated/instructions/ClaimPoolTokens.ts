/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category ClaimPoolTokens
 * @category generated
 */
export const ClaimPoolTokensStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number
}>([['instructionDiscriminator', beet.u8]], 'ClaimPoolTokensInstructionArgs')
/**
 * Accounts required by the _ClaimPoolTokens_ instruction
 *
 * @property [_writable_] depositReceipt
 * @property [_writable_, **signer**] owner
 * @property [_writable_] vault
 * @property [_writable_] destination
 * @property [_writable_] feeWallet
 * @property [] depositAuthority
 * @property [] poolMint
 * @category Instructions
 * @category ClaimPoolTokens
 * @category generated
 */
export type ClaimPoolTokensInstructionAccounts = {
  depositReceipt: web3.PublicKey
  owner: web3.PublicKey
  vault: web3.PublicKey
  destination: web3.PublicKey
  feeWallet: web3.PublicKey
  depositAuthority: web3.PublicKey
  poolMint: web3.PublicKey
  tokenProgram?: web3.PublicKey
  systemProgram?: web3.PublicKey
}

export const claimPoolTokensInstructionDiscriminator = 5

/**
 * Creates a _ClaimPoolTokens_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category ClaimPoolTokens
 * @category generated
 */
export function createClaimPoolTokensInstruction(
  accounts: ClaimPoolTokensInstructionAccounts,
  programId = new web3.PublicKey('5TAiuAh3YGDbwjEruC1ZpXTJWdNDS7Ur7VeqNNiHMmGV')
) {
  const [data] = ClaimPoolTokensStruct.serialize({
    instructionDiscriminator: claimPoolTokensInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.depositReceipt,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.owner,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.vault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.destination,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.feeWallet,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.depositAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.poolMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
